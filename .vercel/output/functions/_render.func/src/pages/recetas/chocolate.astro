---
export const prerender = false
import Layout from '../../layouts/Layout.astro';
import Sidebar from '../../components/Sidebar.astro';
import Header from '../../components/Header.astro';
import Agente from '../../components/agente.astro';
---

<Layout title="Galletas de Chocolate - CROQUERS">
  <div class="flex min-h-screen relative">
    <Sidebar />

    <!-- Main content with responsive margins -->
    <main class="flex-1 lg:ml-80 lg:mr-80 transition-all duration-300 ease-in-out">
      <div class="min-h-screen bg-gradient-to-br from-gray-50 to-white">
        <Header />
        
        <div class="container mx-auto px-4 py-8 pb-24 lg:pb-8">
          <!-- Loading Progress Bar -->
          <div id="loading-container" class="mb-8">
            <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
              <div class="flex items-center space-x-4 mb-4">
                <div class="w-12 h-12 bg-gradient-to-r from-amber-400 to-yellow-400 rounded-full flex items-center justify-center">
                  <span class="text-xl animate-bounce">🍫</span>
                </div>
                <div>
                  <h2 class="text-xl font-bold text-gray-800">Analizando Galletas de Chocolate</h2>
                  <p class="text-gray-600 text-sm">Scrapeando precios en tiempo real desde múltiples supermercados...</p>
                </div>
              </div>
              
              <!-- Progress Bar -->
              <div class="w-full bg-gray-200 rounded-full h-3 mb-2">
                <div id="progress-bar" class="bg-gradient-to-r from-amber-400 to-yellow-400 h-3 rounded-full transition-all duration-1000 ease-out" style="width: 0%"></div>
              </div>
              
              <div class="flex justify-between text-sm text-gray-600">
                <span id="progress-text">Iniciando...</span>
                <span id="progress-percent">0%</span>
              </div>
            </div>
          </div>

          <!-- Content Container -->
          <section class="space-y-8" id="chocolate-content">
            <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
              <div class="text-center py-8">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <div class="w-8 h-8 border-4 border-gray-300 border-t-amber-400 rounded-full animate-spin"></div>
                </div>
                <p class="text-gray-500">Preparando información de la receta...</p>
              </div>
            </div>
          </section>
        </div>
      </div>
    </main>

    <!-- Chat Agent - Ahora visible en todas las pantallas -->
    <Agente />
  </div>
</Layout>

<script is:inline>
  const container = document.getElementById("chocolate-content");
  const loadingContainer = document.getElementById("loading-container");
  const progressBar = document.getElementById("progress-bar");
  const progressText = document.getElementById("progress-text");
  const progressPercent = document.getElementById("progress-percent");
  const BACKEND_URL = "https://myrecipebook-d7cg.onrender.com";
  const CACHE_KEY = "chocolate_receta_cache";
  const CACHE_TIMESTAMP_KEY = "chocolate_receta_timestamp";

  // Progress steps - ahora distribuidos en ~20 segundos
  const progressSteps = [
    { percent: 5, text: "Iniciando conexión..." },
    { percent: 15, text: "Obteniendo datos de ingredientes..." },
    { percent: 25, text: "Scrapeando precios en tiempo real..." },
    { percent: 35, text: "Verificando Hipermaxi..." },
    { percent: 45, text: "Consultando Farmacorp..." },
    { percent: 55, text: "Revisando Fidalga..." },
    { percent: 65, text: "Calculando costos totales..." },
    { percent: 75, text: "Aplicando márgenes de ganancia..." },
    { percent: 85, text: "Generando análisis financiero..." },
    { percent: 95, text: "Optimizando precios sugeridos..." },
    { percent: 100, text: "¡Proceso completado!" }
  ];

  let currentStep = 0;
  let fetchPromise = null;

  function updateProgress() {
    if (currentStep < progressSteps.length) {
      const step = progressSteps[currentStep];
      progressBar.style.width = step.percent + '%';
      progressText.textContent = step.text;
      progressPercent.textContent = step.percent + '%';
      currentStep++;
      
      // Distribución de tiempo para llegar a ~20 segundos total
      const delay = currentStep <= 3 ? 1800 : 
                   currentStep <= 7 ? 2200 : 
                   currentStep <= 9 ? 1500 : 1000;
      
      setTimeout(updateProgress, delay);
    } else {
      // Esperar a que termine el fetch antes de mostrar contenido
      fetchPromise.then(() => {
        setTimeout(() => {
          loadingContainer.style.opacity = '0';
          setTimeout(() => {
            loadingContainer.style.display = 'none';
          }, 500);
        }, 500);
      });
    }
  }

  // Cache cleanup functions
  function setupCacheCleanup() {
    window.addEventListener('beforeunload', () => {
      const timestamp = Date.now();
      localStorage.setItem('tab_close_check', timestamp.toString());
      
      setTimeout(() => {
        const storedTimestamp = localStorage.getItem('tab_close_check');
        if (storedTimestamp === timestamp.toString()) {
          localStorage.removeItem(CACHE_KEY);
          localStorage.removeItem(CACHE_TIMESTAMP_KEY);
          localStorage.removeItem('tab_close_check');
        }
      }, 100);
    });

    localStorage.removeItem('tab_close_check');
  }

  // Render recipe function
  function renderReceta(receta, fromCache = false) {
    const total = receta.total;
    const unitario = total / 10;
    const dolarBase = 7;
    const dolarActual = 16;
    const margen = 0.25;

    const indice = dolarActual / dolarBase;
    const precioSugerido = (unitario * indice * (1 + margen)).toFixed(2);
    const precioMinimo = 6;
    const precioFinalUnidad = Math.max(precioSugerido, precioMinimo).toFixed(2);

    const precioPaquete4 = (precioFinalUnidad * 4).toFixed(2);
    const precioPaquete6 = (precioFinalUnidad * 6).toFixed(2);

    const ingredientesHTML = receta.ingredientes.map(i => `
      <li class="bg-gradient-to-br from-gray-50 to-white rounded-xl p-4 border border-gray-200 hover:shadow-md transition-all">
        <div class="flex items-start space-x-3">
          <span class="text-2xl">🧄</span>
          <div class="flex-1">
            <h4 class="font-semibold text-gray-800 mb-1">${i.nombre}</h4>
            <p class="text-sm text-gray-600">Usado: ${i.usado} de ${i.total}</p>
            <p class="text-sm font-medium text-amber-600">Costo: Bs ${(i.usado / i.total * i.precio).toFixed(2)}</p>
          </div>
        </div>
      </li>
    `).join("");

    const cacheIndicator = fromCache 
      ? `<div class="flex items-center space-x-2 text-green-600 text-sm">
           <span class="animate-pulse">📁</span>
           <div>
             <span class="font-semibold">Datos cargados desde caché local</span>
             <p class="text-xs text-gray-500">Última actualización: ${new Date(parseInt(localStorage.getItem(CACHE_TIMESTAMP_KEY))).toLocaleString()}</p>
           </div>
         </div>`
      : `<div class="flex items-center space-x-2 text-blue-600 text-sm">
           <span class="animate-pulse">🌐</span>
           <div>
             <span class="font-semibold">Datos scrapeados en tiempo real</span>
             <p class="text-xs text-gray-500">Precios actualizados: ${new Date().toLocaleString()}</p>
           </div>
         </div>`;

    container.innerHTML = `
      <!-- Header -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden">
        <div class="bg-gradient-to-r from-gray-900 to-gray-800 px-6 py-6">
          <h2 class="text-3xl font-bold text-white mb-2">${receta.nombre}</h2>
          <p class="text-gray-300">Receta premium con análisis completo de costos</p>
        </div>
      </div>

      <!-- Ingredients -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
        <h3 class="text-2xl font-bold text-gray-800 mb-6 flex items-center space-x-2">
          <span>🥄</span>
          <span>Ingredientes</span>
        </h3>
        <ul class="grid grid-cols-1 md:grid-cols-2 gap-4">${ingredientesHTML}</ul>
      </div>

      <!-- Cost Summary -->
      <div class="bg-gradient-to-br from-amber-50 to-yellow-50 rounded-2xl p-6 border border-amber-200">
        <h3 class="text-xl font-bold text-amber-800 mb-4 flex items-center space-x-2">
          <span>📊</span>
          <span>Resumen de costos</span>
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div class="bg-white rounded-xl p-4 border border-amber-200">
            <h4 class="font-semibold text-amber-700 mb-1">Costo total</h4>
            <p class="text-2xl font-bold text-amber-800">Bs ${total.toFixed(2)}</p>
          </div>
          <div class="bg-white rounded-xl p-4 border border-amber-200">
            <h4 class="font-semibold text-amber-700 mb-1">Costo por unidad (10)</h4>
            <p class="text-2xl font-bold text-amber-800">Bs ${unitario.toFixed(2)}</p>
          </div>
        </div>
      </div>

      <!-- Pricing Suggestions -->
      <div class="bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl p-6 border border-green-200">
        <h3 class="text-xl font-bold text-green-800 mb-4 flex items-center space-x-2">
          <span>💰</span>
          <span>Precio de venta sugerido</span>
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div class="bg-white rounded-xl p-4 border border-green-200 text-center">
            <h4 class="font-semibold text-green-700 mb-2">Unidad (mínimo Bs 6)</h4>
            <p class="text-3xl font-bold text-green-800">Bs ${precioFinalUnidad}</p>
          </div>
          <div class="bg-white rounded-xl p-4 border border-green-200 text-center">
            <h4 class="font-semibold text-green-700 mb-2">Paquete de 4</h4>
            <p class="text-3xl font-bold text-green-800">Bs ${precioPaquete4}</p>
          </div>
          <div class="bg-white rounded-xl p-4 border border-green-200 text-center">
            <h4 class="font-semibold text-green-700 mb-2">Paquete de 6</h4>
            <p class="text-3xl font-bold text-green-800">Bs ${precioPaquete6}</p>
          </div>
        </div>
        <div class="bg-green-100 rounded-lg p-3">
          <p class="text-sm text-green-700">
            <strong>Análisis:</strong> Dólar base Bs ${dolarBase}, actual Bs ${dolarActual}, margen ${margen * 100}%
          </p>
        </div>
      </div>

      <!-- Status -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-4">
        <div class="flex justify-between items-center">
          <div class="flex-1">
            ${cacheIndicator}
          </div>
          <button 
            onclick="clearCacheAndReload()" 
            class="ml-4 px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors"
            title="Limpiar caché y actualizar precios"
          >
            🗑️ Actualizar precios
          </button>
        </div>
      </div>

      <!-- Navigation -->
      <div class="flex flex-col sm:flex-row gap-4">
        <a href="/" class="inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-gray-900 to-gray-800 text-white rounded-xl font-semibold hover:from-gray-800 hover:to-gray-700 transition-all shadow-lg hover:shadow-xl">
          <span class="mr-2">←</span>
          Volver al inicio
        </a>
        <button onclick="window.print()" class="inline-flex items-center justify-center px-6 py-3 bg-amber-500 hover:bg-amber-600 text-white rounded-xl font-semibold transition-all shadow-lg hover:shadow-xl">
          <span class="mr-2">🖨️</span>
          Imprimir receta
        </button>
      </div>
    `;
  }

  // Load recipe data with caching
  function loadRecetaData() {
    // Check if data exists in cache
    const cachedData = localStorage.getItem(CACHE_KEY);
    const cacheTimestamp = localStorage.getItem(CACHE_TIMESTAMP_KEY);
    
    if (cachedData && cacheTimestamp) {
      try {
        const receta = JSON.parse(cachedData);
        console.log('✅ Datos encontrados en caché, cargando directamente...');
        // Si hay datos en caché, mostrar inmediatamente sin barra de progreso
        loadingContainer.style.display = 'none';
        renderReceta(receta, true);
        return Promise.resolve(receta);
      } catch (error) {
        console.error('❌ Error al parsear datos del caché:', error);
        localStorage.removeItem(CACHE_KEY);
        localStorage.removeItem(CACHE_TIMESTAMP_KEY);
      }
    }

    // Si no hay datos en caché, hacer fetch y mostrar barra de progreso
    console.log('🌐 No hay datos en caché, obteniendo desde servidor...');
    
    // Crear promesa del fetch para sincronizar con la barra de progreso
    fetchPromise = fetch(`${BACKEND_URL}/api/receta/chocolate`)
      .then(res => {
        if (!res.ok) {
          throw new Error(`HTTP error! status: ${res.status}`);
        }
        return res.json();
      })
      .then(receta => {
        // Guardar en localStorage
        localStorage.setItem(CACHE_KEY, JSON.stringify(receta));
        localStorage.setItem(CACHE_TIMESTAMP_KEY, Date.now().toString());
        console.log('💾 Datos guardados en caché');
        
        renderReceta(receta, false);
        return receta;
      })
      .catch(err => {
        console.error('❌ Error al cargar receta:', err);
        container.innerHTML = `
          <div class="bg-white rounded-2xl shadow-lg border border-red-200 p-8 text-center">
            <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-red-600 text-2xl">⚠️</span>
            </div>
            <h3 class="text-xl font-bold text-red-800 mb-2">Error al cargar la receta</h3>
            <p class="text-red-600 mb-4">No se pudo conectar con el servidor: ${err.message}</p>
            <button onclick="location.reload()" class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
              Reintentar
            </button>
          </div>
        `;
        throw err;
      });

    return fetchPromise;
  }

  // Clear cache and reload
  function clearCacheAndReload() {
    if (confirm('¿Deseas actualizar los precios? Esto eliminará los datos guardados y volverá a scrapear los precios actuales.')) {
      localStorage.removeItem(CACHE_KEY);
      localStorage.removeItem(CACHE_TIMESTAMP_KEY);
      console.log('🗑️ Caché eliminado, recargando página...');
      location.reload();
    }
  }

  // Make function globally available
  window.clearCacheAndReload = clearCacheAndReload;

  // Initialize app
  function initializeApp() {
    setupCacheCleanup();
    
    // Verificar si hay datos en caché
    const cachedData = localStorage.getItem(CACHE_KEY);
    
    if (cachedData) {
      // Si hay datos en caché, cargar directamente
      console.log('🚀 Inicializando con datos en caché');
      loadRecetaData();
    } else {
      // Si no hay datos en caché, iniciar barra de progreso y fetch simultáneamente
      console.log('🚀 Inicializando carga completa con barra de progreso');
      loadRecetaData(); // Esto iniciará el fetch
      updateProgress(); // Esto iniciará la barra de progreso
    }
  }

  // Initialize when page loads
  initializeApp();
</script>
</Layout>
