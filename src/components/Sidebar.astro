---
// src/components/Sidebar.astro
const BACKEND_URL = import.meta.env.BACKEND_URL || 'http://127.0.0.1:3000';
---
<!-- Mobile menu button -->
<button 
  id="mobile-menu-button"
  class="lg:hidden fixed top-4 left-4 z-50 w-12 h-12 bg-gray-900 text-white rounded-xl shadow-lg flex items-center justify-center"
>
  <span id="menu-icon">‚ò∞</span>
</button>

<!-- Overlay for mobile -->
<div 
  id="mobile-overlay" 
  class="lg:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-40 hidden"
></div>

<!-- Sidebar -->
<aside 
  id="sidebar"
  class="fixed left-0 top-0 h-full w-80 bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 text-white shadow-2xl z-40 transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out"
>
  <!-- Header -->
  <div class="relative p-6 border-b border-gray-700">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-3">
        <div class="w-12 h-12 bg-gradient-to-r from-amber-400 to-yellow-400 rounded-xl flex items-center justify-center shadow-lg">
          <span class="text-gray-900 text-xl font-bold">üç™</span>
        </div>
        <div>
          <h1 class="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-300 to-yellow-300">
            CROQUERS
          </h1>
          <p class="text-xs text-gray-400">Reposter√≠a Profesional</p>
        </div>
      </div>
      
      <!-- Close button for mobile -->
      <button 
        id="close-sidebar"
        class="lg:hidden w-8 h-8 text-gray-400 hover:text-white transition-colors"
      >
        ‚úï
      </button>
    </div>
    
    <!-- Decorative line -->
    <div class="absolute bottom-0 left-6 right-6 h-px bg-gradient-to-r from-transparent via-amber-400 to-transparent"></div>
  </div>

  <!-- Navigation -->
  <nav class="flex-1 p-6 space-y-2 overflow-y-auto">
    <!-- Home -->
    <a 
      href="/" 
      class="flex items-center space-x-3 px-4 py-3 rounded-xl hover:bg-white/10 transition-all duration-200 group"
    >
      <span class="text-xl group-hover:scale-110 transition-transform">üè†</span>
      <span class="font-medium">Inicio</span>
    </a>

    <!-- Featured Recipe -->
    <a 
      href="/recetas/chocolate"
      class="flex items-center space-x-3 px-4 py-3 rounded-xl hover:bg-white/10 transition-all duration-200 group bg-amber-500/20 border border-amber-500/30"
    >
      <span class="text-xl group-hover:scale-110 transition-transform">üç´</span>
      <div class="flex-1">
        <span class="font-medium text-amber-200">Galletas de Chocolate</span>
        <div class="text-xs text-amber-300/80">Receta destacada</div>
      </div>
      <span class="text-amber-300 text-xs bg-amber-500/30 px-2 py-1 rounded-full">Popular</span>
    </a>

    <!-- Recipes Section -->
    <div class="pt-4">
      <div class="flex items-center justify-between px-4 py-2 mb-2">
        <div class="flex items-center space-x-2">
          <span class="text-lg">üìñ</span>
          <span class="font-semibold text-amber-200">Mis Recetas</span>
        </div>
        <div id="recetas-count" class="text-xs bg-gray-700 text-gray-300 px-2 py-1 rounded-full">
          0
        </div>
      </div>
      
      <ul id="recetas-lista" class="space-y-1 ml-2">
        <li class="px-4 py-2 text-gray-400 italic text-sm flex items-center space-x-2">
          <div class="w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full animate-spin"></div>
          <span>Cargando recetas...</span>
        </li>
      </ul>
    </div>

    <!-- Status indicator -->
    <div id="sidebar-status" class="hidden mt-6 mx-4 p-3 rounded-xl text-xs">
      <div class="flex items-center space-x-2">
        <div id="status-indicator" class="w-2 h-2 rounded-full"></div>
        <span id="status-text"></span>
      </div>
    </div>
  </nav>

  <!-- Footer -->
  <div class="p-6 border-t border-gray-700">
    <div class="text-center">
      <p class="text-xs text-gray-400 mb-2">Versi√≥n 1.0.0</p>
      <div class="flex justify-center space-x-4 text-xs text-gray-500">
        <a href="#" class="hover:text-amber-300 transition-colors">Ayuda</a>
        <span>‚Ä¢</span>
        <a href="#" class="hover:text-amber-300 transition-colors">Soporte</a>
      </div>
    </div>
  </div>
</aside>

<script is:inline define:vars={{ BACKEND_URL }}>
  document.addEventListener('DOMContentLoaded', async () => {
    const sidebar = document.getElementById('sidebar');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const closeSidebar = document.getElementById('close-sidebar');
    const mobileOverlay = document.getElementById('mobile-overlay');
    const menuIcon = document.getElementById('menu-icon');
    
    const ul = document.getElementById('recetas-lista');
    const statusDiv = document.getElementById('sidebar-status');
    const statusText = document.getElementById('status-text');
    const statusIndicator = document.getElementById('status-indicator');    const recetasCount = document.getElementById('recetas-count');
    // BACKEND_URL ya est√° disponible desde define:vars

    // Mobile menu functionality
    function toggleSidebar() {
      const isOpen = !sidebar.classList.contains('-translate-x-full');
      
      if (isOpen) {
        sidebar.classList.add('-translate-x-full');
        mobileOverlay.classList.add('hidden');
        menuIcon.textContent = '‚ò∞';
      } else {
        sidebar.classList.remove('-translate-x-full');
        mobileOverlay.classList.remove('hidden');
        menuIcon.textContent = '‚úï';
      }
    }

    mobileMenuButton?.addEventListener('click', toggleSidebar);
    closeSidebar?.addEventListener('click', toggleSidebar);
    mobileOverlay?.addEventListener('click', toggleSidebar);

    // Close sidebar on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !sidebar.classList.contains('-translate-x-full')) {
        toggleSidebar();
      }
    });

    // Status functions
    function showStatus(message, type = 'info') {
      if (statusDiv && statusText && statusIndicator) {
        statusText.textContent = message;
        
        const colors = {
          info: 'bg-blue-500/20 text-blue-300 border-blue-500/30',
          success: 'bg-green-500/20 text-green-300 border-green-500/30',
          error: 'bg-red-500/20 text-red-300 border-red-500/30'
        };
        
        const indicatorColors = {
          info: 'bg-blue-400',
          success: 'bg-green-400',
          error: 'bg-red-400'
        };
        
        statusDiv.className = `mt-6 mx-4 p-3 rounded-xl text-xs border ${colors[type]}`;
        statusIndicator.className = `w-2 h-2 rounded-full ${indicatorColors[type]}`;
        statusDiv.classList.remove('hidden');
      }
    }

    function hideStatus() {
      statusDiv?.classList.add('hidden');
    }

    function updateRecetasCount(count) {
      if (recetasCount) {
        recetasCount.textContent = count.toString();
      }
    }

    // Loading functions
    function showLoading() {
      ul.innerHTML = `
        <li class="px-4 py-2 text-gray-400 italic text-sm flex items-center space-x-2">
          <div class="w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full animate-spin"></div>
          <span>Cargando recetas...</span>
        </li>
      `;
      showStatus('Conectando con servidor...', 'info');
    }

    function showError(message) {
      ul.innerHTML = `
        <li class="px-4 py-2 text-red-400 text-sm flex items-center space-x-2">
          <span class="text-red-500">‚ö†Ô∏è</span>
          <span>${message}</span>
        </li>
      `;
      showStatus('Error de conexi√≥n', 'error');
      updateRecetasCount(0);
    }

    // API functions
    async function loadRecetasFromAPI() {
      try {
        showStatus('Cargando desde servidor...', 'info');
        const res = await fetch(`${BACKEND_URL}/api/recetas`);
        if (!res.ok) {
          throw new Error(`Error del servidor: ${res.status}`);
        }
        const data = await res.json();
        if (!Array.isArray(data)) {
          throw new Error('Formato de datos inv√°lido');
        }
        showStatus('Conectado al servidor', 'success');
        setTimeout(hideStatus, 3000);
        return data;
      } catch (err) {
        console.error('Error al cargar desde API:', err);
        throw err;
      }
    }

    async function loadRecetasFromFile() {
      try {
        showStatus('Usando datos locales...', 'info');
        const res = await fetch('/recetas.json');
        if (!res.ok) {
          throw new Error(`Error al cargar archivo local: ${res.status}`);
        }
        const data = await res.json();
        showStatus('Datos locales cargados', 'success');
        setTimeout(hideStatus, 3000);
        return data;
      } catch (err) {
        console.error('Error al cargar desde archivo:', err);
        throw err;
      }
    }

    // Main loading logic
    let recetas = [];
    
    // Try localStorage first
    try {
      const cached = localStorage.getItem('recetas');
      if (cached) {
        recetas = JSON.parse(cached);
        if (Array.isArray(recetas) && recetas.length > 0) {
          showStatus('Usando cach√© local', 'success');
          setTimeout(hideStatus, 2000);
        }
      }
    } catch (err) {
      console.warn('Error al leer localStorage:', err);
    }

    // Load from API or file if no cache
    if (!recetas || !Array.isArray(recetas) || recetas.length === 0) {
      showLoading();
      
      try {
        recetas = await loadRecetasFromAPI();
        localStorage.setItem('recetas', JSON.stringify(recetas));
      } catch (apiError) {
        try {
          console.log('API fall√≥, intentando cargar desde archivo local...');
          recetas = await loadRecetasFromFile();
          localStorage.setItem('recetas', JSON.stringify(recetas));
        } catch (fileError) {
          showError('No se pudieron cargar las recetas');
          return;
        }
      }
    }

    // Render recipes
    if (!recetas || recetas.length === 0) {
      ul.innerHTML = `
        <li class="px-4 py-2 text-gray-400 italic text-sm flex items-center space-x-2">
          <span>üìù</span>
          <span>No hay recetas disponibles</span>
        </li>
      `;
      showStatus('Sin recetas disponibles', 'error');
      updateRecetasCount(0);
      return;
    }

    const validRecetas = recetas.filter(r => r && r.id && r.nombre);
    
    if (validRecetas.length === 0) {
      ul.innerHTML = `
        <li class="px-4 py-2 text-gray-400 italic text-sm flex items-center space-x-2">
          <span>‚ö†Ô∏è</span>
          <span>No hay recetas v√°lidas</span>
        </li>
      `;
      showStatus('Datos inv√°lidos', 'error');
      updateRecetasCount(0);
    } else {
      const items = validRecetas.map(r => `
        <li>
          <a
            href="/recetas/${encodeURIComponent(r.id)}"
            class="flex items-center space-x-3 px-4 py-2 rounded-lg hover:bg-white/10 transition-all duration-200 group text-sm"
            title="Ver receta: ${r.nombre}"
          >
            <span class="text-base group-hover:scale-110 transition-transform">üçΩÔ∏è</span>
            <span class="text-gray-300 group-hover:text-white transition-colors">${r.nombre}</span>
          </a>
        </li>
      `).join('');

      ul.innerHTML = items;
      updateRecetasCount(validRecetas.length);
      
      if (statusDiv.classList.contains('hidden')) {
        showStatus(`${validRecetas.length} recetas cargadas`, 'success');
        setTimeout(hideStatus, 2000);
      }
    }
  });
</script>
